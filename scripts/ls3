#!/usr/bin/perl
#
# List the tags of MP3 files.
#
# 1 file
# 2 title
# 3 track
# 4 artist
# 5 album
# 6 comment
# 7 year
# 8 genre
# 9 mmss
# 10 seconds

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY MICHAEL COOK ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL MICHAEL COOK OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Michael Cook.

use strict;
use warnings;
use Getopt::Long;
use MP3::Tag;			# apt: libmp3-tag-perl

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = "usage: $THIS [options] files.mp3\n";

my @THESE_COLUMNS;
my $CHECK;
my $OFS = "|";
my $NOHEADER;
my $DEBUG;

Getopt::Long::config("bundling");
GetOptions
("check!" => \$CHECK,
 #
 # Verify this script has what it needs to run.
 # Validates any "use" directives and any dependencies on external programs.
 #

 "columns|c=s" => \@THESE_COLUMNS,
 #
 # Show only these columns in this order.  Names may be separated by
 # whitespace or commas.
 #

 "ofs|f=s" => \$OFS,
 #
 # Set the output field separator.
 #
 # As a special case, setting the OFS to "\n" (-n) causes the fields to be
 # output one per line with the header on the left.
 #

 "t" => sub { $OFS = "\t" },
 "n" => sub { $OFS = "\n" },

 "h" => \$NOHEADER,

 "debug!" => \$DEBUG,
 #
 # Debug mode.
 #
)
or die $USAGE;

exit 0 if $CHECK;

@ARGV == 0 and die $USAGE;

my @COLUMNS = qw(FILE TITLE TRACK ARTIST ALBUM COMMENT YEAR
		 GENRE MMSS SECONDS ID3v1 ID3v2);

my $exit = 0;

if (@THESE_COLUMNS) {
    my %col = map { $_ => 1 } @COLUMNS;

    $_ = "@THESE_COLUMNS";
    s/,/ /g;
    @COLUMNS = split;
    for (@COLUMNS) {
	next if $col{uc $_};
	warn "No such column '$_'";
	$exit = 1;
    }
    exit $exit
	if $exit;
    $OFS //= "\t";
}

my $header;
$header++ if $NOHEADER;
for my $file (@ARGV)
{
    my $mp3 = MP3::Tag->new($file);
    unless ($mp3)
    {
	warn "$file: $!";
	$exit = 1;
	next;
    }

    print join($OFS, @COLUMNS), "\n"
	unless $OFS eq "\n" || $header++;
    my @v;
    for (@COLUMNS)
    {
	push @v, $file if uc eq "FILE";
	push @v, $mp3->title() if uc eq "TITLE";
	push @v, $mp3->track() if uc eq "TRACK";
	push @v, $mp3->artist() if uc eq "ARTIST";
	push @v, $mp3->album() if uc eq "ALBUM";
	push @v, $mp3->comment() if uc eq "COMMENT";
	push @v, $mp3->year() if uc eq "YEAR";
	push @v, $mp3->genre() if uc eq "GENRE";
	push @v, $mp3->time_mm_ss() if uc eq "MMSS";
	push @v, $mp3->total_secs_int() if uc eq "SECONDS";
	push @v, exists($mp3->{ID3v1}) ? "yes" : "no" if uc eq "ID3V1";
	push @v, exists($mp3->{ID3v2}) ? "yes" : "no" if uc eq "ID3V2";
    }
    if ($OFS eq "\n")
    {
	for my $c (@COLUMNS)
	{
	    printf "%-7s ", $c
		unless $NOHEADER;
	    print shift @v, "\n";
	}
	print "\n";
    }
    else
    {
	print join($OFS, @v), "\n";
    }
}
exit $exit;

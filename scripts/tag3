#!/usr/bin/perl
#
# Edit the tags of MP3 files by applying arbitrary Perl expressions.
#
# In the Perl expression:
#  - $_ is the title, artist, album or genre to modify.
#  - $FILE is the name of the MP3 file.
#  - $MMSS is the duration in minutes and seconds.
#  - $SECONDS is the duration in seconds.
#
# Example:
#  tag3 --title='s/^/Podcast: /' podcast*.mp3
#
# Insert at the beginning of the title the string "MMDD", the month & day of
# the last-modification time of each mp3 file.
#
#  tag3 --title='($m,$d)=(localtime((stat$FILE)[9]))[4,3];s/^/sprintf"%02d%02d ",$m+1,$d/e' *.mp3
#

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY MICHAEL COOK ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL MICHAEL COOK OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Michael Cook.

use strict;
use warnings;
use Getopt::Long;
use MP3::Tag;			# apt: libmp3-tag-perl

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = "usage: $THIS [options] files.mp3\n";

my @TITLE;
my @ARTIST;
my @ALBUM;
my @GENRE;
my @TRACK;
my @COMMENT;
my @YEAR;
my $CHECK;
my $VERBOSE;
my $DEBUG;

Getopt::Long::config("bundling");
GetOptions
("title|t=s" => \@TITLE,
 "artist|a=s" => \@ARTIST,
 "album|l=s" => \@ALBUM,
 "genre|g=s" => \@GENRE,
 "track|k=s" => \@TRACK,
 "comment|c=s" => \@COMMENT,
 "year|y=s" => \@YEAR,

 "check!" => \$CHECK,
 #
 # Verify this script has what it needs to run.
 # Validates any "use" directives and any dependencies on external programs.
 #

 "verbose|v" => \$VERBOSE,
 "debug!" => \$DEBUG,
)
or die $USAGE;

exit 0 if $CHECK;

@ARGV == 0 and die $USAGE;

our $FILE;
our $MMSS;
our $SECONDS;

sub edit_title;
{
    local $^W;
    no strict;
    eval "sub edit_title { " . join(" ; ", @TITLE) . " }";
    $@ && die $@;
}

sub edit_artist;
{
    local $^W;
    no strict;
    eval "sub edit_artist { " . join(" ; ", @ARTIST) . " }";
    $@ && die $@;
}

sub edit_album;
{
    local $^W;
    no strict;
    eval "sub edit_album { " . join(" ; ", @ALBUM) . " }";
    $@ && die $@;
}

sub edit_genre;
{
    local $^W;
    no strict;
    eval "sub edit_genre { " . join(" ; ", @GENRE) . " }";
    $@ && die $@;
}

sub edit_track;
{
    local $^W;
    no strict;
    eval "sub edit_track { " . join(" ; ", @TRACK) . " }";
    $@ && die $@;
}

sub edit_comment;
{
    local $^W;
    no strict;
    eval "sub edit_comment { " . join(" ; ", @COMMENT) . " }";
    $@ && die $@;
}

sub edit_year;
{
    local $^W;
    no strict;
    eval "sub edit_year { " . join(" ; ", @YEAR) . " }";
    $@ && die $@;
}

my $exit = 0;
for my $file (@ARGV)
{
    my $mp3 = MP3::Tag->new($file);
    unless ($mp3)
    {
	warn "$file: $!";
	$exit = 1;
	next;
    }
    my $changed;
    $FILE = $file;
    $MMSS = $mp3->time_mm_ss();
    $SECONDS = $mp3->total_secs_int();

    my $title = $mp3->title();
    warn "> $file: title {$title}\n" if $DEBUG;
    {
	local $_ = $title;
	edit_title();
	if ($_ eq $title)
	{
	    warn "> unchanged title '$title'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: title {$_}\n" if $DEBUG;
	    $mp3->title_set($_);
	    ++$changed;
	    print "Title : \"$title\"\n",
		  "      : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $artist = $mp3->artist();
    warn "> $file: artist {$artist}\n" if $DEBUG;
    {
	local $_ = $artist;
	edit_artist();
	if ($_ eq $artist)
	{
	    warn "> unchanged artist '$artist'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: artist {$_}\n" if $DEBUG;
	    $mp3->artist_set($_);
	    ++$changed;
	    print "Artist: \"$artist\"\n",
		  "      : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $album = $mp3->album();
    warn "> $file: album {$album}\n" if $DEBUG;
    {
	local $_ = $album;
	edit_album();
	if ($_ eq $album)
	{
	    warn "> unchanged album '$album'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: album {$_}\n" if $DEBUG;
	    $mp3->album_set($_);
	    ++$changed;
	    print "Album : \"$album\"\n",
		  "      : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $genre = $mp3->genre();
    warn "> $file: genre {$genre}\n" if $DEBUG;
    {
	local $_ = $genre;
	edit_genre();
	if ($_ eq $genre)
	{
	    warn "> unchanged genre '$genre'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: genre {$_}\n" if $DEBUG;
	    $mp3->genre_set($_);
	    ++$changed;
	    print "Genre : \"$genre\"\n",
		  "      : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $track = $mp3->track();
    warn "> $file: track {$track}\n" if $DEBUG;
    {
	local $_ = $track;
	edit_track();
	if ($_ eq $track)
	{
	    warn "> unchanged track '$track'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: track {$_}\n" if $DEBUG;
	    $mp3->track_set($_);
	    ++$changed;
	    print "Track : \"$track\"\n",
		  "      : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $comment = $mp3->comment();
    warn "> $file: comment {$comment}\n" if $DEBUG;
    {
	local $_ = $comment;
	edit_comment();
	if ($_ eq $comment)
	{
	    warn "> unchanged comment '$comment'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: comment {$_}\n" if $DEBUG;
	    $mp3->comment_set($_);
	    ++$changed;
	    print "Comment : \"$comment\"\n",
		  "        : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    my $year = $mp3->year();
    warn "> $file: year {$year}\n" if $DEBUG;
    {
	local $_ = $year;
	edit_year();
	if ($_ eq $year)
	{
	    warn "> unchanged year '$year'\n" if $DEBUG;
	}
	else
	{
	    warn "> $file: year {$_}\n" if $DEBUG;
	    $mp3->year_set($_);
	    ++$changed;
	    print "Year : \"$year\"\n",
		  "     : \"$_\"\n"
		      if $VERBOSE;
	}
    }

    if ($changed)
    {
	print "Updating tags in $file\n"
	    if $VERBOSE;
	local $SIG{__WARN__} = sub {
	    print STDERR @_;
	    $exit = 1;
	};
	$mp3->update_tags;
    }
    warn "> close $file\n" if $DEBUG;
    $mp3->close;
}
exit $exit;
